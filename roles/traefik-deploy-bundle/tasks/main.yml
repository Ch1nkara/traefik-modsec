---
- name: Check that at least one of http/tls is enabled
  fail:
    msg: "One of enable_tls and enable_http must be set to true"
  when: enable_tls == false and enable_http == false

- name: Scp the bundle to the webserver
  copy:
    src: "{{ bundle_local_path }}"
    dest: "traefik_bundle.tar.gz"

#- name: Extract the bundle archive
#  unarchive:
#    src: "traefik_bundle.tar.gz"
#    dest: "/opt"
#    remote_src: true
# Changed to shell due to unstability
- name: Extract the bundle archive
  shell: cd /opt && tar xvf ~/traefik_bundle.tar.gz && cd ~

- name: upload templates conf files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: "templates/traefik_service.j2"
      dest: "/etc/systemd/system/traefik.service"
    - src: "templates/static.j2"
      dest: "/opt/traefik_bundle/static.yml"
    - src: "templates/dynamic.j2"
      dest: "/opt/traefik_bundle/dynamic.yml"
 
- name: Change ownership of traefik bundle
  file:
    path: "/opt/traefik_bundle"
    owner: "{{ unprivileged_user }}"
    group: "{{ unprivileged_user }}"
    recurse: true

- name: Change permissions to make traefik executable
  file:
    path: /opt/traefik_bundle/traefik
    mode: +x

- name: reload daemons
  systemd:
    daemon_reload: true

- name: Start traefik
  systemd:
      name: traefik
      state: started
# Dirty fallback way to start traefik
#- name: Start traefik
#  shell: cd /opt/traefik_bundle && nohup su www-data -s /bin/bash -c "/opt/traefik_bundle/traefik --configFile static.yml" >log.txt 2>&1 &

- name: Ip tables hijacking http -> traefik_http
  shell: "iptables -t nat -A PREROUTING -p tcp '!' -i lo  --dport {{ http_webserver_port }} -j DNAT --to  :{{ http_traefik_port }}"

- name: Ip tables hijacking https -> traefik_https
  shell: "iptables -t nat -A PREROUTING -p tcp '!' -i lo  --dport {{ https_webserver_port }} -j DNAT --to  :{{ https_traefik_port }}"

- name: Ip tables hijacking ipv6_http -> traefik_http
  shell: "ip6tables -t nat -A PREROUTING -p tcp '!' -i lo  --dport {{ http_webserver_port }} -j DNAT --to  :{{ http_traefik_port }}"

- name: Ip tables hijacking v6_https -> traefik_https
  shell: "ip6tables -t nat -A PREROUTING -p tcp '!' -i lo  --dport {{ https_webserver_port }} -j DNAT --to  :{{ https_traefik_port }}"

# Not working, don't have time to investigate
#- name: Ip tables hijacking :80 -> traefik_http
#  iptables:
#    table: nat
#    chain: PREROUTING
#    protocol: tcp
#    source_port: 80
#    source: "{{ ansible_default_ipv4.address }}"
#    ctstate: DNAT
#    destination: "{{ ansible_default_ipv4.address }}"
#    destination_port: "{{ http_traefik_port }}"
#  become: yes
#
#- name: Ip tables hijacking :443 -> traefik_https
#  iptables:
#    table: nat
#    chain: PREROUTING
#    protocol: tcp
#    source_port: 443
#    source: "{{ ansible_default_ipv4.address }}"
#    ctstate: DNAT
#    destination: "{{ ansible_default_ipv4.address }}"
#    destination_port: "{{ https_traefik_port }}"
#  become: yes
#
#- name: Ip tables hijacking ipv6:80 -> traefik_http
#  iptables:
#    table: nat
#    chain: PREROUTING
#    protocol: tcp
#    source_port: 80
#    source: "{{ ansible_default_ipv6.address }}"
#    ctstate: DNAT
#    destination: "{{ ansible_default_ipv6.address }}"
#    destination_port: "{{ http_traefik_port }}"
#    ip_version: ipv6
#  become: yes
#
#- name: Ip tables hijacking ipv6:443 -> traefik_https
#  iptables:
#    table: nat
#    chain: PREROUTING
#    protocol: tcp
#    source_port: 443
#    source: "{{ ansible_default_ipv6.address }}"
#    ctstate: DNAT
#    destination: "{{ ansible_default_ipv6.address }}"
#    destination_port: "{{ https_traefik_port }}"
#    ip_version: ipv6
#  become: yes

- name: Cleaning up files and folders
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "traefik_bundle.tar.gz"
